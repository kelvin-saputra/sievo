image: node:20.17.0

stages:
  - Install
  - Testing
  - Build
  - Deployment

variables:
  VERCEL_ORG_ID: $VERCEL_ORG_ID
  VERCEL_PROJECT_ID: $VERCEL_PROJECT_ID

DEPENDENCIES_INSTALLATION:
  stage: Install
  script:
    - npm ci --legacy-peer-deps
    - npm install --save-dev typescript @types/react @types/node --legacy-peer-deps
    - du -sh node_modules/
    - tar -cf node_modules.tar node_modules 
    - split -b 300M node_modules.tar "node_modules.part."
  artifacts:
    paths:
      - node_modules.part.*
    expire_in: 1h
  

TESTING:
  stage: Testing
  before_script:
    - cat node_modules.part.* > node_modules.tar
    - tar -xvf node_modules.tar
  script:
    - npm run lint --if-present
    - npm run test --if-present
  artifacts:
    paths:
      - test-reports/
    expire_in: 1h

BUILD:
  stage: Build
  before_script:
    - cat node_modules.part.* > node_modules.tar
    - tar -xvf node_modules.tar
  script:
    - npx prisma generate
    - npm run build
  after_script:
    - tar -cf next_build.tar .next
    - split -b 300M next_build.tar "next_build.part."
  artifacts:
    paths:
      - next_build.part.*
    expire_in: 1h

DEPLOYMENT_DEVELOPMENT:
  stage: Deployment
  only:
    - development
  before_script:
    - cat next_build.part.* > next_build.tar
    - tar -xvf next_build.tar
    - npm config set legacy-peer-deps=true
    - npm install -g vercel
    - npx prisma generate
    - vercel pull --yes --environment=development --token $VERCEL_TOKEN
  script:
    - vercel build --token $VERCEL_TOKEN
    - DEPLOY_OUTPUT="$(vercel deploy --prebuilt --token $VERCEL_TOKEN)"
    - vercel alias set $DEPLOY_OUTPUT $DEV_URL --token $VERCEL_TOKEN
  environment:
    name: development
    url: $DEV_URL


DEPLOYMENT_PREVIEW:
  stage: Deployment
  only:
    - staging
  before_script:
    - cat next_build.part.* > next_build.tar
    - tar -xvf next_build.tar
  script:
    - npm config set legacy-peer-deps=true
    - npm install -g vercel
    - npx prisma generate
    - vercel pull --yes --environment=preview --token $VERCEL_TOKEN
    - vercel build --token $VERCEL_TOKEN
    - DEPLOY_OUTPUT="$(vercel deploy --prebuilt --token $VERCEL_TOKEN)"
    - vercel alias set $DEPLOY_OUTPUT $STAGGING_URL --token $VERCEL_TOKEN 
  environment:
    name: preview
    url: $STAGGING_URL

DEPLOYMENT_PRODUCTION:
  stage: Deployment
  only:
    - main
  before_script:
    - cat next_build.part.* > next_build.tar
    - tar -xvf next_build.tar
  script:
    - npm config set legacy-peer-deps=true
    - npm install -g vercel
    - npx prisma generate
    - vercel pull --yes --environment=production --token $VERCEL_TOKEN
    - vercel build --prod --token $VERCEL_TOKEN
    - DEPLOY_OUTPUT="$(vercel deploy --prebuilt --prod --token $VERCEL_TOKEN)"
    - vercel alias set $DEPLOY_OUTPUT $PRODUCTION_URL --token $VERCEL_TOKEN
  environment:
    name: production
    url: $PRODUCTION_URL

after_script:
  - echo "Cleaning up..."